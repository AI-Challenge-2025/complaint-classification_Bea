import streamlit as st
import joblib
import os
from googletrans import Translator

# ‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏• ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.markdown("""
    <style>
    .main {
        max-width: 800px;
        margin: auto;
        background-color: #fefefe;
        padding: 2rem;
        border-radius: 12px;
    }
    .stTextArea textarea {
        background-color: #fff0f5;
        border-radius: 10px;
        border: 1px solid #e4bad4;
        font-size: 16px;
    }
    .stButton button {
        background-color: #c1f0dc;
        color: #4b2354;
        border-radius: 10px;
        font-weight: bold;
        font-size: 16px;
        padding: 0.5rem 1.5rem;
    }
    .stSuccess, .stWarning, .stInfo {
        background-color: #f1ebf9;
        border-left: 6px solid #b083d9;
    }
    .block-container {
        padding-top: 2rem;
    }
    </style>
""", unsafe_allow_html=True)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå
model = joblib.load(r"E:\!\B\complaint_model.pkl")
vectorizer = joblib.load(r"E:\!\B\tfidf_vectorizer.pkl")

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.markdown("<h2 style='font-size:26px;'>üé® Complaint Classification Web App</h2>", unsafe_allow_html=True)
st.markdown("""
<p style='font-size:18px;'>
‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥üí¨</p>
""", unsafe_allow_html=True)

# ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
user_input = st.text_area("üìù ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")

# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Predict
if st.button("üîç Predict ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"):
    if user_input.strip() == "":
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô")
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        if any('\u0E00' <= c <= '\u0E7F' for c in user_input):
            translator = Translator()
            translated = translator.translate(user_input, src='th', dest='en')
            user_input = translated.text
            st.info(f"üîÑ ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©: {user_input}")

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        vect_input = vectorizer.transform([user_input])
        prediction = model.predict(vect_input)

        # ‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        pred_en = prediction[0]
        product_thai = {
            "Debt collection": "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡∏µ‡πâ",
            "Mortgage": "‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡πâ‡∏≤‡∏ô",
            "Credit reporting, credit repair services, or other personal consumer reports": "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï / ‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï",
            "Credit card or prepaid card": "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï / ‡∏û‡∏£‡∏µ‡πÄ‡∏û‡∏î",
            "Checking or savings account": "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å",
            "Money transfer, virtual currency, or money service": "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô / ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•",
            "Vehicle loan or lease": "‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå",
            "Payday loan, title loan, or personal loan": "‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô / ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",
            "Student loan": "‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
            "Consumer loan": "‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ",
            "Bank account or service": "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ / ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
            "Money transfers": "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
            "Prepaid card": "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
            "Credit card": "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï",
            "Virtual currency": "‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•",
            "Other financial service": "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ",
        }
        pred_th = product_thai.get(pred_en, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•")

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö feedback
        st.session_state["last_input"] = user_input
        st.session_state["last_prediction"] = pred_en

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        st.success(f"üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà AI ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {pred_en} ({pred_th})")

# ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡πâ feedback
if "last_prediction" in st.session_state and "last_input" in st.session_state:
    st.markdown("### üôã‚Äç‚ôÄÔ∏è ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏´‡∏°?")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"):
            os.makedirs("Data", exist_ok=True)
            with open("Data/feedback.csv", "a", encoding="utf-8") as f:
                f.write(f"\"{st.session_state['last_input']}\",\"{st.session_state['last_prediction']}\",correct\n")
            st.success("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏¥‡∏ä‡∏°")
    with col2:
        if st.button("‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"):
            os.makedirs("Data", exist_ok=True)
            with open("Data/feedback.csv", "a", encoding="utf-8") as f:
                f.write(f"\"{st.session_state['last_input']}\",\"{st.session_state['last_prediction']}\",incorrect\n")
            st.warning("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
if st.checkbox("üìä ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•"):
    try:
        with open("Model/metrics.txt", "r", encoding="utf-8") as f:
            st.text(f.read())
    except FileNotFoundError:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå metrics.txt ‡πÇ‡∏õ‡∏£‡∏î train ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô")
